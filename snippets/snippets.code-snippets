{
  "Console log": {
    "prefix": "clog",
    "body": [
      "console.log(${1:message})"
    ],
    "description": "Log something to the console"
  },
  "Anonymous function": {
    "prefix": "anfn",
    "body": [
      "(${1:params}: ${2:paramType}): ${3:returnType} => {",
      "${4}",
      "}"
    ],
    "description": "Creates an anonymous function"
  },
  "Named function": {
    "prefix": "nfn",
    "body": [
      "const ${1:functionName} = (${2:params}: ${3:paramType}): ${4:returnType} => {",
      "${5}",
      "}"
    ],
    "description": "Creates a named function"
  },
  "ES5 Function declaration": {
    "prefix": "fn",
    "body": [
      "function ${1:functionName}(${2:params}) {",
      "${3}",
      "}"
    ],
    "description": "Creates a ES5 function declaration"
  },
  "Import Statement": {
    "prefix": "imp",
    "body": "import ${1:ModuleName} from \"${2:Module}\"",
    "description": "Creates an ES6 import statement"
  },
  "Import Statement Destructured": {
    "prefix": "imd",
    "body": "import { ${1:ModuleName} } from \"${2:Module}\"",
    "description": "Creates an ES6 import statement"
  },
  "Import * as alias from module": {
    "prefix": "ima",
    "body": "import * as ${1:AliasName} from \"${2:Module}\"",
    "description": "Import everything from a module with an alias"
  },
  "Export default module": {
    "prefix": "exp",
    "body": "export default ${1:moduleName}",
    "description": "Export default module"
  },
  "exportAs": {
    "prefix": "exa",
    "body": "export { ${2:originalName} as ${3:alias} } from '${1:module}'$0",
    "description": "Export default module"
  },
  "exportNamedFunction": {
    "prefix": "enf",
    "body": [
      "export const ${1:functionName} = (${2:params} : ${3:paramType}) : ${4:returnType} => {",
      "\t$4",
      "}",
      ""
    ],
    "description": "Export named arrow function "
  },
  "exportDefaultFunction": {
    "prefix": "edf",
    "body": [
      "export default (${1:params}): ${2:paramType}) : ${3:returnType} => {",
      "\t$0",
      "}",
      ""
    ],
    "description": "Export default arrow function"
  },
  "For Of Loop": {
    "prefix": "fof",
    "body": [
      "for(let ${1:item} of ${2:iterable}) {",
      "  ${3:doSomething}",
      "}"
    ],
    "description": "Create a for of loop"
  },
  "forIn": {
    "prefix": "fin",
    "body": [
      "for(let ${1:item} in ${2:object}) {",
      "\t${0}",
      "}",
      ""
    ],
    "description": "Iterating over property values of iterable objects"
  },
  "destructObject": {
    "prefix": "dob",
    "body": "const { ${1:propertyName} } : { ${2:propertyType} } = ${3:objectToDestruct}",
    "description": "Creates and assigns a variable using object destructing"
  },
  "destructArray": {
    "prefix": "dar",
    "body": "const [${1:propertyName}] : [${2:propertyType}] = ${3:arrayToDestruct}",
    "description": "Creates and assigns a local variable using array destructing"
  },
  "consoleAssert": {
    "prefix": "cas",
    "body": "console.assert(${1:expression}, ${2:object})",
    "description": "If the specified expression is false, the message is written to the console along with a stack trace"
  },
  "consoleClear": {
    "prefix": "ccl",
    "body": "console.clear(${0})",
    "description": "Clears the console"
  },
  "consoleCount": {
    "prefix": "cco",
    "body": "console.count(${1:label})",
    "description": "Writes the the number of times that count() has been invoked at the same line and with the same label"
  },
  "consoleDir": {
    "prefix": "cdi",
    "body": "console.dir(${1:object})",
    "description": "Prints a JavaScript representation of the specified object"
  },
  "consoleError": {
    "prefix": "cer",
    "body": "console.error(${1:object})",
    "description": "Displays a message in the console and also includes a stack trace from where the method was called"
  },
  "consoleGroup": {
    "prefix": "cgr",
    "body": "console.group(\"${1:label}\")",
    "description": "Groups and indents all following output by an additional level, until console.groupEnd() is called."
  },
  "consoleGroupEnd": {
    "prefix": "cge",
    "body": "console.groupEnd()",
    "description": "Closes out the corresponding console.group()."
  },
  "consoleLog": {
    "prefix": "clg",
    "body": "console.log(${1:object})",
    "description": "Displays a message in the console"
  },
  "consoleTrace": {
    "prefix": "ctr",
    "body": "console.trace(${1:object})",
    "description": "Prints a stack trace from the point where the method was called"
  },
  "consoleLogObject": {
    "prefix": "clo",
    "body": "console.log(`${1:object}`, ${1:object})",
    "description": "Logs property with name."
  },
  "consoleTime": {
    "prefix": "ctm",
    "body": "console.time(`${1:object}`)",
    "description": "Console time wrapper"
  },
  "consoleTimeEnd": {
    "prefix": "cte",
    "body": "console.timeEnd(`${1:object}`)",
    "description": "Console time end wrapper"
  },
  "consoleWarn": {
    "prefix": "cwa",
    "body": "console.warn(${1:object})",
    "description": "Displays a message in the console but also displays a yellow warning icon along with the logged message"
  },
  "consoleInfo": {
    "prefix": "cin",
    "body": "console.info(${1:object})",
    "description": "Displays a message in the console but also displays a blue information icon along with the logged message"
  },
  "import React": {
    "prefix": "imr",
    "body": ["import React from 'react'", ""]
  },
  "reactClassComponent": {
    "prefix": "rcc",
    "body": [
      "import React, { Component } from 'react'",
      "",
      "export default class ${1:${TM_FILENAME_BASE}} extends Component {",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<div>",
      "\t\t\t\t$0",
      "\t\t\t</div>",
      "\t\t)",
      "\t}",
      "}",
      ""
    ],
    "description": "Creates a React component class"
  },
  "reactClassExportComponent": {
    "prefix": "rce",
    "body": [
      "import React, { Component } from 'react'",
      "",
      "export class ${1:${TM_FILENAME_BASE}} extends Component {",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<div>",
      "\t\t\t\t$0",
      "\t\t\t</div>",
      "\t\t)",
      "\t}",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}",
      ""
    ],
    "description": "Creates a React component class and exports it"
  },
  "reactFunctionalComponent": {
    "prefix": "rfc",
    "body": [
      "import React, { FC } from 'react'",
      "",
      "type Props = { ${3:propTypes}  }",
      "const ${1:COMPONENT_NAME} : FC<Props> = (${2:props}): ${4:returnType} => {",
      "\treturn (",
      "\t\t<div>",
      "\t\t\t$0",
      "\t\t</div>",
      "\t)",
      "}",
      ""
    ],
    "description": "Creates a React Functional Component"
  },
  "reactFunctionalExportComponent": {
    "prefix": "rfce",
    "body": [
      "import React, { FC } from 'react'",
      "",
      "type Props = { ${4: propTypes}  }",
      "const ${1:COMPONENT_NAME} : FC<Props> = (${2:props}): ${4:returnType} => {",
      "",
      "\treturn (",
      "\t\t<div>",
      "\t\t\t$0",
      "\t\t</div>",
      "\t)",
      "}",
      "",
      "export default ${1:${COMPONENT_NAME}}",
      ""
    ],
    "description": "Creates a React Functional Component and exports it"
  },
}